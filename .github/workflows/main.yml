name: Build precompiled NIFs

on:
  push:
    tags:
      - 'v*'

jobs:
  build_release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.16", "2.15"]
        # Example reduced set:
        job:
          - { target: x86_64-unknown-linux-gnu , os: ubuntu-20.04 , use-cross: true }
          - { target: x86_64-apple-darwin      , os: macos-14     }
          # - { target: x86_64-pc-windows-msvc   , os: windows-2019 }
          # Remove or skip problematic targets like riscv64, aarch64-musl, etc. 
          # until you have a custom Docker image / manual solution.
    name: NIF ${{ matrix.nif }} - ${{ matrix.job.target }} (${{ matrix.os }})

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Extract project version
        shell: bash
        run: |
          echo "PROJECT_VERSION=$(sed -n 's/^  @version \"\\(.*\\)\"/\\1/p' mix.exs | head -n1)" >> $GITHUB_ENV

      - name: Install cross
        if: ${{ matrix.job.use-cross }}
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Setup environment for Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libssl-dev pkg-config
          echo "OPENSSL_DIR=/usr" >> $GITHUB_ENV

      - name: Setup environment for macOS
        if: runner.os == 'macOS'
        run: |
          brew install openssl
          echo "OPENSSL_DIR=$(brew --prefix openssl)" >> $GITHUB_ENV

      # - name: Setup OpenSSL for Windows
      #   if: runner.os == 'Windows'
      #   run: |
      #     choco install openssl
      #     echo "OPENSSL_DIR=C:\\Program Files\\OpenSSL-Win64" >> $GITHUB_ENV

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}

      - name: Build the project
        id: build-crate
        uses: philss/rustler-precompiled-action@v1.0.1
        with:
          project-name: ex_fastembed
          project-version: ${{ env.PROJECT_VERSION }}
          target: ${{ matrix.job.target }}
          nif-version: ${{ matrix.nif }}
          use-cross: ${{ matrix.job.use-cross }}
          project-dir: "native/ex_fastembed"

      - name: Artifact upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-crate.outputs.file-name }}
          path: ${{ steps.build-crate.outputs.file-path }}

      - name: Publish archives and packages
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.build-crate.outputs.file-path }}
        if: startsWith(github.ref, 'refs/tags/')
